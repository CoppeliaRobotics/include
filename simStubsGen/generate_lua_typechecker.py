import argparse
import os
import sys
from parse import parse
from model import ParamTable

parser = argparse.ArgumentParser(description='Generate Lua typechecker.')
parser.add_argument('xml_file', type=str, default=None, help='the callbacks.xml file')
parser.add_argument('lua_file', type=str, default=None, help='the input lua file')
parser.add_argument('lua_xml', type=str, default=None, help='the (lua) XML file')
parser.add_argument('out_file', type=str, default=None, help='the output lua file')
args = parser.parse_args()

if args is False:
    SystemExit

plugin = parse(args.xml_file)
lua_plugin = parse(args.lua_xml)

with open(args.out_file, 'wt') as f:
    f.write(f"""-- {lua_plugin.name} lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'

return function(obj)
""")

    for cmd in lua_plugin.commands:
        paramList = ', '.join(p.name for p in cmd.all_params)
        f.write(f"""    obj['{cmd.name}'] = wrap(obj['{cmd.name}'], function(origFunc)
        return function(...)
            {paramList and 'local ' or ''}{paramList}{paramList and ' = ' or ''}checkargsEx(
                {{level=1}},
                {{
""")
        for p in cmd.all_params:
            f.write(f"""                    {{type = '{p.dtype}'""")
            if isinstance(p,ParamTable):
                if p.itype:
                    f.write(f""", item_type = '{p.itype}'""")
                if p.size:
                    f.write(f""", size = '{p.size}'""")
            if p.nullable:
                f.write(f""", nullable = true""")
            if p.default:
                f.write(f""", default = {p.default}""")
            f.write(f"""}},
""")
        f.write(f"""                }},
                ...
            )
            local _rets = {{origFunc({paramList})}}
            return table.unpack(_rets)
        end
    end)

""")


    printed_reify_comment = False
    for cmd in plugin.commands:
        if not any(p.dtype == 'func' for p in cmd.all_params):
            continue
        if not printed_reify_comment:
            f.write("""

    -- accept pure function where callback string is expected:
""")
            printed_reify_comment = True

        paramList = [p.name for p in cmd.mandatory_params]
        rparamList = [f'reify({p.name})' if p.dtype == 'func' else p.name for p in cmd.mandatory_params]
        if cmd.optional_params:
            paramList.append('...')
            rparamList.append('...')
        paramList = ', '.join(paramList)
        rparamList = ', '.join(rparamList)

        f.write(f"""
    obj['{cmd.name}'] = wrap(obj['{cmd.name}'], function(origFunc)
        return function({paramList})
            return origFunc({rparamList})
        end
    end)
""")

    f.write(f"""end
""")
